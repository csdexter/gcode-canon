* we are not a G-Code validator, input must be well formed. We will fathom the 
  widest possible extent of G-Code in use in the wild, but we will neither
  check nor fix your spelling.
* machine coordinate system is in mm
* only three axes (no A,B,C)
* arc I,J,K are *always* relative to the arc starting point
* machine display/conceptual precision is 10um
* integers must be integers, no G00.0000000 garbage.
* surprisingly, gcode-machine should poll overrides and dynamically apply any
  changes.
* the initial G-Code parser blueprint looked like this: {
/**
 * - echo (MSG, [already done first by input]
 * - if(seen_G && arg = have_G(2, 93, 94)) state.feedrateMode = arg
 * - if(seen_F) state.feedrate = get_override_feed_machine(get_F()) [returns 100% if disabled]
 * - if(seen_S) state.spindleSpeed = get_override_speed_machine(get_S()), set_spindle_speed_machine(state.spindleSpeed)
 * - if(seen_T) state.tool = get_T(), preselect_tool_machine(state.tool) [moves carousel]
 * - if(seen_M && have_M(1, 6)) change_tool_machine(state.tool) [actually changes tool]
 * - if(seen_M && have_M(1, 52)) change_tool_machine(TOOL_EMPTY) [unload spindle]
 * - if(seen_M && arg = have_M(2, 26, 27)) select_probe_machine(arg)
 * - if(seen_M && arg = have_M(2, 41, 42)) set_probemode_machine(arg)
 * - if(seen_M && arg = have_M(3, 3, 4, 5)) start_spindle_machine(arg)
 * - if(seen_M && arg = have_M(5, 7, 8, 9, 68, 69)) start_coolant_machine(arg)
 * - if(seen_M && arg = have_M(2, 13, 14)) start_spindle_and_coolant_machine(arg))
 * - if(seen_M && arg = have_M(2, 48, 49)) enable_override_machine(arg)
 * - if(seen_G && have_G(1, 4)) dwell_machine(get_P())
 * - if(seen_G && arg = have_G(3, 17, 18, 19)) state.systemPlane = arg
 * - if(seen_G && arg = have_G(2, 20, 21)) state.systemUnits = arg
 * - if(seen_G && arg = have_G(3, 40, 41, 42)) state.systemRadComp = arg
 * - if(seen_G && arg = have_G(3, 43, 44, 49)) state.systemLenComp = arg
 * - if(seen_G && arg = have_G(6, 53, 54, 55, 56, 57, 58, 59)) state.systemCurrent = arg
 * - if(seen_M && arg = have_M(3, 21, 22, 23)) enable_mirror_machine(arg)
 * - if(seen_G && arg = have_G(2, 22, 23)) state.systemMirror = (arg, get_X(), get_Y(), get_Z())
 * - if(seen_G && arg = have_G(2, 68, 69)) state.systemRotation = (arg, get_X(), get_Y(), get_R())
 * - if(seen_G && arg = have_G(2, 61, 64)) set_pathcontrol_machine(arg)
 * - if(seen_G && have_G(1, 9)) nmPC = true, oldPC = get_pathcontrol_machine(), set_pathcontrol_machine(EXACT)
 * - if(seen_G && arg = have_G(2, 90, 91)) state.systemAbsolute = arg
 * - if(seen_G && arg = have_G(2, 15, 16)) state.systemCartesian = arg
 * - if(seen_G && arg = have_G(2, 50, 51)) state.systemScaling = (arg, get_I(), get_J(), get_K(), get_P())
 * - if(seen_G && arg = have_G(2, 98, 99)) state.retractMode = arg
 * - if(seen_G)
 *     if(arg = have_G(4, 28, 29, 30, 80))
 *       state.motionMode = OFF
 *       if(arg != 80) move_machine_home(arg, get_X(), get_Y(), get_Z())
 *     if(arg = have_G(2, 10, 11)) oldMode = state.motionMode, state.motionMode = store_parameter_mode(arg) [which means STORE or oldMode]
 *     if(have_G(1, 92)) state.systemOffset = (get_X(), get_Y(), get_Z())
 * - if(seen_G)
 *     if(arg = have_G(6, 0, 1, 2, 3, 12, 13)) state.motionMode = arg
 *     if(arg = have_G(13, 31, 38, 73, 74, 81, 82, 83, 84, 85, 86, 87, 88, 89)) state.motionMode = CYCLE, state.cycle = arg
 * - if(seen_M && arg = have_M(3, 19, 20, 25)) move_machine_aux(arg)
 * - switch(state.motionMode)
 *     RAPID, LINEAR: move_machine_line(do_WCS_math(get_X(), get_Y(), get_Z(), state.system*), state.feedrate, state.feedrateMode)
 *     ARC, CIRCLE: move_machine_arc(do_WCS_math(get_X(), get_Y(), get_Z(), state.system*), get_I(), get_J(), get_K(), get_R(), get_P(), state.feedrate, state.feedrateMode)
 *     STORE: do_data_input(get_L(), get_P(), ...), commit_data()
 *     CYCLE: move_machine_cycle(state.cycle, do_WCS_math(get_X(), get_Y(), get_Z(), state.system*), state.retractMode, get_L(), get_P(), get_Q(), get_R(), state.feedrate, state.feedrateMode)
 *     OFF: <NOP>
 * - if(nmPC && state.motionMode != OFF) set_pathcontrol_machine(oldPC), nmPC = false
 * - if(seen_G && have_G(1, 65)) cmsc = true, push_parameters(), update_parameters(map_words_to_parameters(get_ALL()))
 * - if(seen_M && arg = have_M(8, 0, 1, 2, 17, 18, 30, 36, 60)) stop_machine(arg) [which reads Optional Stop and/or terminates us accordingly]
 * - update_parameters(parse_parameters(line)) [takes care of assignments #<idx>=<value OR #<param>>]
 * - commit_parameters() [always last on the line, according to the standard]
 * - if(seen_M) [since these change the line, they're conceptually after the end]
 *     if(have_M(1, 47)) rewind_input()
 *     if(have_M(1, 98)) push(tell_input()), seek_line_input(programs[get_P()]), push(tell_input()), repeat = get_L()
 *     if(have_M(1, 99))
 *       if(repeat) repeat--, seek_line_input(peek())
 *       if(!repeat) pop(), seek_line_input(pop())
 *         if(cmsc) cmsc = false, pop_parameters() [pop_parameters() calls commit internally]
 */
}
* G-Code parsing results go into a two-level FIFO for doing radius compensation (must find a way to serialize sequence points too)
  Output of the compensation FIFO looks like (to_dest, top_speed) or (machine_event) ...
  ... and is then send through another two-level FIFO for doing corner compensation ...
  ... and is then processed into movement profiles (t1, t2, t3, t4, t5, t6, t7) and
      (machine_event) records into the movement queue.
  IF NOT EXACT_STOP_CHECK:
    Every time a new (tn) record gets added to the 1st queue, all the records
        from the last (machine_event) up to it get reprocessed by adjusting their
        tn values (sometimes to zero) so that a continuous move results.
  The (tn) tuples are then sent for playback and decomposition into axis values,
      which works by running time forward in quanta and calculating the coordinate
      using a different formula for x = f(t) depending on which n is currently
      processed from the (tn) tuple. After x across the movement vector is known,
      it is decomposed into axis values (X, Y, Z) which are compared with the
      last known axis values and any difference results in a step being output
      for the corresponding axis.
  NOTE: this is especially interesting for circular interpolation which will
      also be treated as if it were linear motion until the decomposition step.
  NOTE: this means our CPU must be fast enough to perform the most complex
      calculation for the worst case scenario (max F specified) in a time
      quantum small enough to cause no more than one step on any axis, with time
      to spare. "Time to spare" is needed because the various calculations will
      take differing times to complete, yet our step pulses (if any) need to be
      output exactly when the quantum lapses so that the physical result (i.e.
      machine movement) exactly replicates our calculations.
  Finally, if the feed override changes position as we move, we will break the
      current move into two: one with distance_to_go == distance traveled so far
      and another one with distance_to_go == distance left and
      top_speed == previous_top_speed * override setting.
  NOTE: we will need to find a way to instantly reload the playback routine with
      a new profile, mid-profile.
  NOTE: due to the way playback works (with a fixed table of fn(t)), we will
      need to distinguish between overriding up or down: up will result in a new
      move beginning right now whereas down will result in a new move beginning
      in the future, at exactly the distance needed to decellerate to the new
      speed. If there isn't enough room, the new override setting will take
      effect from the beginning of the next move in the queue which will be
      overwritten in place.
  NOTE: due to the way the machine parameters influence the math (fixed
      acceleration etc.), override changed events will not take effect at some
      times. For example, if overriding up and we're in the acceleration phase,
      no immediate change will occur (the slope will continue upwards a little
      bit longer to match requested new top speed). Same for overriding down
      during the decelleration phase.